;;; Demonstrate higher order procedures with MAP
;;; List stuff from 04-pair1.do-it

(defvar word-size 4)

(defproc cons (car cdr)
  (defvar pair (malloc (* word-size 2)))
  (set-car pair car)
  (set-cdr pair cdr)
  pair)

(defproc set-car (pair car) (poke pair car))
(defproc set-cdr (pair cdr) (poke (+ pair word-size) cdr))

(defproc car (pair) (peek pair))
(defproc cdr (pair) (peek (+ pair word-size)))

(defproc write-list (list)
  (while (> list 0)
    (printf "%d " (car list))
    (set list (cdr list)))
  (newline))

;;; Map

(defproc map (proc list)
  (if (= list 0)
      list
      (cons (call proc (car list)) (map proc (cdr list)))))

(defproc square (n) (* n n))

;;; List (1 2 3 4 5 6)
(defvar list
  (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 0)))))))

(display "Orginal list		= ")
(write-list list)
(display "Map(square, list)	= ")
(write-list (map (procedure square) list))
