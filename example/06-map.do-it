;;; Demonstrate Higher Order Procedures with MAP
;;; List stuff from 05-pair2.do-it

(defmacro defstruct (const . fields)
  (define (enumerate lst)
    (define (helper lst idx)
      (if (null? lst)
          '()
          (cons idx (helper (cdr lst) (+ idx 1)))))
    (helper lst 0))
  (let* ((word-size 4)
         (field-names (map car fields))
         (field-count (length fields))
         (field-indices (enumerate fields))
         (getters field-names)
         (setters (map cadr fields)))
    `(begin
       (defproc ,const ,field-names
         (defvar obj (malloc (* ,word-size ,field-count)))
         ,@(map (lambda (setter field-name)
                  `(,setter obj ,field-name))
                setters field-names)
         obj)
       ,@(map
          (lambda (getter idx)
            `(defproc ,getter (obj)
               (peek (+ obj (* ,idx ,word-size)))))
          getters field-indices)
       ,@(map
          (lambda (setter idx)
            `(defproc ,setter (obj1 obj2)
               (poke (+ obj1 (* ,idx ,word-size)) obj2)))
          setters field-indices))))

(defstruct cons
  (car set-car)
  (cdr set-cdr))

(defproc write-list (list)
  (while (> list 0)
    (printf "%d " (car list))
    (set list (cdr list)))
  (newline))

;;; Map

(defproc map (proc list)
  (if (= list 0)
      list
      (cons (call proc (car list)) (map proc (cdr list)))))

(defproc square (n) (* n n))

;;; List (1 2 3 4 5 6)
(defvar list
  (cons 1 (cons 2 (cons 3 (cons 4 (cons 5 (cons 6 0)))))))

(display "Orginal list		= ")
(write-list list)
(display "Map(square, list)	= ")
(write-list (map (procedure square) list))
